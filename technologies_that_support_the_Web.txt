
URI

  Web開発において、URIは変わらないように設計すべき。

  http            : スキーマ
  blog.example.jp : ホスト名
  /entries/1      : パス


HTTPメソッド

  ※ HTTPメソッドで指定できるメソッドはGETとPOSTだけ。

    PUTとDELETEは、_methodパラメータを用いて送信する。

  CRUD操作をするため送信メソッド

  GETメソッド → read

    情報を取得するリクエスト
    URLにput,deleteなどの「動詞」を入れることはおかしい。
    リクエスト送信後に、リソースの状態が変化してはいけない。

    べき等。安全。

  POSTメソッド → create



    ・子リソースの作成

        送信先のurlの子リソースを作成する。

        例
            /list へpostを送信   →    /list/item3が作成される。

    ・リソースのデータの追加

        そのURLのリソースに新しいデータを追加。

        例
            /log へpostを送信   →   /log のbodyの内容に新しいデータを追加

    ・ほかのメソッドで対応できない処理をする

      ・GETメソッドで長いパラメータを送信するとき、GETメソッドでは対応できない長さの時に、POSTメソッドのbodyにパラメータを設定して送信する。
      ※ ほかのメソッドで対応できるものをPOSTで処理してしまうと、それぞれの特性(べき等)などが崩れてしまうためので注意。

      べき等じゃない。安全じゃない。


  PUTメソッド → update

    ・子リソースの内容を更新

      例 /list/item3 へputを送信   →   /list/itme3の内容を更新

    ・リソースの作成

      例 /list/newitem がない場合に そこへputを送信  →   /list/newitemリソースを作成
      ※ /list/newitem がある場合は、その内容を更新する。

      べき等。安全じゃない(内容を変化させる)。

      PUTで送信する内容を相対的なものにしてしまうと、べき等じゃなくなるので注意。
      送信するときは、絶対的な表現のものを送信する。

      悪い例 100 → put +100 = 200 → put +100 = 300 (べき等じゃない)

      よい例 100 → put 200 = 200 → put 200 = 200 (べき等)

  POSTとPUTの使い分け

    ・どちらもURIリソースを作成できる。

    ・POST
      リソース名をクライアントが指定できない → /list/item3 の item3の部分はサーバー側が勝手に決定する。

    ・PUT
      リソース名をクライアントが指定する → /list/item3 の item3の部分はクライアントが独自で指定する。
      ※ただし、独自で指定するには、ほかに重複しているものがないか確認しないといけない。
      ※その上、URL設計の深い知識がなければいけない。

      特別な理由がない限り、POSTを使用するのが最適。


  DELETEメソッド → delete

    ・リソースの削除
    ・httpメソッドのbodyを持たない。

    例 /list/item3 へdeleteを送信 → /list/imte3 を削除。

    べき等。安全じゃない(内容を変化させる)。

    時間により指定するリソースが変化してしまうリソースに対してdeleteメソッドを送信してしまうと、冪等ではなくなるので注意。

    悪い例 list/latest → delete ... 今のlatestリソースを削除。そして次のlatestリソースが入る。 → delete ... 違う内容のものを削除してしまい、べき等な結果にならない。

    よい例 list/latestのように時間により指定するリソースが変化してしまうものは、特別な理由がない限り、更新や削除などの操作ができないように制限を設ける。

    
